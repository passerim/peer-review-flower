@startuml classi
package flwr.server <<Rectangle>> {

    class Server {
        fit()
    }

    interface Strategy {
        initialize_parameters()
        configure_fit()
        aggregate_fit()
        configure_evaluate()
        aggregate_evaluate()
        evaluate()
    }

    abstract ClientManager {
        num_available()
        sample()
    }

    class SimpleClientManager{
    }

}

package flwr.client <<Rectangle>> {

    interface NumpyClient {
        get_properties()
        get_parameters()
        fit()
        evaluate()
    }

}

package prflwr.peer_review <<Rectangle>> {

    abstract PeerReviewClient {
        train()
        review()
    }

    class ClientImpl{
    }

    class PeerReviewServer{
    }

    interface MultipleReviewStrategy {
        configure_train()
        aggregate_train()
        configure_review()
        aggregate_review()
        aggregate_after_review()
        stop_review()
    }

    abstract PeerReviewStrategy {
    }

    class PeerReviewStrategyImpl{
    }

}

ClientManager <|-- SimpleClientManager
Server <|-- PeerReviewServer
PeerReviewClient <|-- ClientImpl
NumpyClient <|-- PeerReviewClient
Strategy <|-- MultipleReviewStrategy
MultipleReviewStrategy <|-- PeerReviewStrategy
PeerReviewStrategy <|-- PeerReviewStrategyImpl
PeerReviewStrategyImpl --o PeerReviewServer
SimpleClientManager --o PeerReviewServer
ClientImpl <.. SimpleClientManager
@enduml